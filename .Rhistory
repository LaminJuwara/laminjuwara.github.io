install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
?thumbnail
library(metalr)
data("sample_metarr_data")
class(sample_metarr_data)
ncol(sample_metarr_data)
sample_metarr_data
data("statindata")
statindata
statindata
statindata[1,2:5]
tt<-statindata[1,2:5]
(tt[1]/tt[3])/(tt[2]/tt[3])
(tt[1]/tt[3])/(tt[2]/tt[4])
(tt[1]/tt[2])/(tt[3]/tt[4])
(statindata[,2]/statindata[,3])/(statindata[,4]/statindata[,5])
(statindata[,2]/statindata[,3])/(statindata[,4]/statindata[,5])
(statindata[,2]/statindata[,4])/(statindata[,3]/statindata[,5])
ncol(statindata)
class(statindata)
statindata$study
str(statindata$HPcase)
str(statindata$HPcase)=="num"
class(statindata$HPcase)
class(statindata$study)
class(statindata[,])
class(statindata[,1:4])
class(statindata[,1])
class(statindata[,c(1,2)])
typeof(statindata)
class(statindata[,1])!="numeric"
class(statindata[,1])!="numeric"
statindata[,1]
class(statindata[,1])
class(statindata[,1])=="numeric"
class(statindata[,2])=="numeric"
class(statindata[,3])=="numeric"
class(statindata[,4])=="numeric"
class(statindata[,5])=="numeric"
class(c(1,2))
tt=c(3,33)
str(tt)
refval=0.001
class(refval)
knitr::opts_chunk$set(echo = TRUE)
# test set
n=100
sigma.star=1/2
beta.star=rnorm(p)
X=cbind(1, matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1)))
# test set
n=100
p=4
sigma.star=1/2
beta.star=rnorm(p)
X=cbind(1, matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1)))
y=X%*%beta.star + sigma.star*rnorm(n)
head(cbind(y,X))
testdata=data.frame(cbind(y,X));
colnames(testdata)<-c("y",paste0("X",0:(p-1),sep = ""))
testdat<-testdata[,-2]
beta.star
testdata=data.frame(cbind(y,X));
colnames(testdata)<-c("y",paste0("X",0:(p-1),sep = ""))
testdat<-testdata[,-2]
knitr::knit("~/Desktop/06-Bios691 data analysis/assignment-5 oscars/blog/oscarsprediction_2020.Rmd")
knitr::opts_chunk$set(echo = TRUE)
ds=read.xlsx("OscarsDataset.xlsx")
# ch is the indicator or win or not, 1 is win, 2 is no win and 0 is NA
ds$win = 1*(ds$Ch==1)+ 0*(ds$Ch==2);
ds$win[ds$Ch==0] = NA;
#table(ds$win,useNA="always")
## DS:   reduced ds. .. best picture (PP)
## just the IMBD movie rating (Pardoe called it called WR)
alltest = ds[ds$win %in% 0:1 & !is.na(ds$WR),]
DS=ds[ds$win %in% 0:1 & ds$PP==1 & !is.na(ds$WR),
c("Year","Name","PP","win","WR")]
#table(DS$win,DS$Year)
#DS[DS$Year==1928,] ## check !! 2 winners / 6. ? coding
# sort by Year (riskset). NB.  NB # Alway sort the riskset by the Year of production
# important because fitted values are sorted by this
DS=DS[order(DS$Year),]
# tail(DS,14)
fit = clogit(win ~ WR + strata(Year), data=DS)
#fit
#str(fit)
DS$fittedLP = fit$linear.predictors ;
#tail(DS,14)
# check what linear predictors (LPs) really are
#tail(cbind(fit$coefficients * (DS$WR - fit$means),DS$fittedLP),20)
# fitted probabilities, riskset by riskset...
DS$exp.LP = exp(DS$fittedLP)
sums=aggregate(DS$exp.LP,by=list(Year=DS$Year),sum)
names(sums)[2] = "sum.exp.LP"
DS= merge(DS,sums,by="Year")
#length(DS[,1])
#tail(DS,14)
DS$fitted.prob.Win = DS$exp.LP/DS$sum.exp.LP # scale so add to 1
#tail(DS,14)
#check
#tail(aggregate(DS$fitted.prob.Win,by=list(Year=DS$Year),sum))
knitr::knit(input = "~/Desktop/06-Bios691 data analysis/assignment-5 oscars/blog/oscarsprediction_2020.Rmd",output = "./_posts/2020-02-08-oscars.md")
knitr::opts_chunk$set(echo = TRUE)
# readable
library(tidyverse)
library(tableone)
library(MASS)
library(survival)
library(ggpubr)
library(Epi)
library(readxl)
library(survminer)
library(base)
library(sjPlot) #Prints readable regression summaries & interaction plots
library(sjmisc)
library(sjlabelled)
# personlised theme
all_theme <- theme_bw() + theme(panel.border = element_rect(color = "black", size = 1.2),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
df<-read_xlsx("HO1_PD_project_Saliva_Data_June2020_Velly_Lamin.xlsx", sheet = 1)
#skimr::skim(df)
#df[1:10,1:8]
#cols<-colnames(df)[c()]
cat("Groups")
df$Groups<-as.factor(df$`Group#`)
#table(df$Groups)
# Plot
df$Diagnosis<-as.factor(ifelse(df$HY<1,"Control","PD"))
df$Normalised_HO1<-df$HO1/df$Protein
df$log_Norm_HO1<-log2(df$Normalised_HO1)
df$logHO1<-log2(df$HO1)
df$Hepatitis<-df$Hepatitis_jaundice_or_liver_disease
df$Chronic_Pain[-which(df$Chronic_Pain%in%c(0,1))]<-NA
df$LEDD<-as.numeric(df$`LEDD (mg)`)
df$Gender[which(df$Gender=="F")]<-"1"
cols =c("HO1","logHO1","Protein","Age","LEDD",
"Gender","Periodontitis","Cancer","Chronic_Pain","Diabetes",
"Hepatitis","Arthritis","Asthma","Kidney_disease","Blood_pressure","Thryoid_problems",
"Heart_problems","Chemotherapy","Radiotherapy","HY","Groups","Diagnosis")
catvars<-cols[8:length(cols)]
df[,catvars]<-apply(df[,catvars], 2, as.factor)
df$Gender<-as.factor(df$Gender)
df$Thryoid_problems<-as.factor(df$Thryoid_problems)
df$Heart_problems<-as.factor(df$Heart_problems)
df$Arthritis<-as.factor(df$Arthritis)
df$Diabetes<-as.factor(df$Diabetes)
subdata<-df[,cols]
# TableOne
# TableOne
rsubdata = subdata[subdata$Groups%in%c(1,4),]
# ggplot(rsubdata, aes(x = logHO1)) +
#   geom_density(aes(color = Groups, linetype = Groups),
#                    size = 1.5) + all_theme +
#   scale_color_manual(values = c("#868686FF", "#EFC000FF"))
ggplot(rsubdata, aes(x = HO1)) +
geom_density(aes(color = Groups, linetype = Groups),
size = 1.5) + all_theme +
scale_color_manual(values = c("#868686FF", "#EFC000FF"))
cols1<-cols[-(length(cols)-1)]
Table1<-CreateTableOne(vars = cols1, strata = "Groups",
data = rsubdata, test = T)
print(Table1, smd=F,showAllLevels = TRUE)
# TableOne
rsubdata = subdata[subdata$Groups%in%c(2,4),]
ggplot(rsubdata, aes(x = HO1)) +
geom_density(aes(color = Groups)) + all_theme +
scale_color_manual(values = c("#868686FF", "#EFC000FF"))
cols1<-cols[-(length(cols)-1)]
Table1<-CreateTableOne(vars = cols1, strata = "Groups",
data = rsubdata, test = T)
print(Table1, smd=F,showAllLevels = TRUE)
# TableOne
rsubdata = subdata[subdata$Groups%in%c(3,4),]
ggplot(rsubdata, aes(x = HO1)) +
geom_density(aes(color = Groups, linetype = Groups),
size = 1.5) + all_theme +
scale_color_manual(values = c("#868686FF", "#EFC000FF"))
# ggplot(rsubdata, aes(x = Protein)) +
#   geom_density(aes(color = Groups, linetype = Groups),
#                    size = 1.5) + all_theme +
#   scale_color_manual(values = c("#868686FF", "#EFC000FF"))
cols1<-cols[-(length(cols)-1)]
Table1<-CreateTableOne(vars = cols1, strata = "Groups",
data = rsubdata, test = T)
print(Table1, smd=F,showAllLevels = TRUE)
cat("Plots of distributions")
ggplot(subdata, aes(x = HO1)) +
geom_density(aes(color = Groups, linetype = Groups),
bins = 30, size = 1.5) + all_theme
cat("Correlation between HO1 and total Protein")
ggscatter(subdata, x = "Protein", y = "HO1",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Protein", ylab = "HO-1")
library(tidyverse)
library(ggpubr)
library(rstatix)
library(broom)
datt = subdata[,c("HO1","Protein","Groups","Age", "Gender", "Thryoid_problems",
"Arthritis", "Hepatitis","Diabetes",
"Blood_pressure", "Heart_problems","LEDD","HY")]
# Fit the model, the covariate goes first
cat("Outlier removal")
model <- lm(HO1 ~ Groups+Protein+Age+Gender+Arthritis+Thryoid_problems+Heart_problems+Diabetes,
data = datt)
# Inspect the model diagnostic metrics
model.metrics <- augment(model) %>%
as.data.frame()
model.metrics$HY<-datt$HY
model.metrics$LEDD<-datt$LEDD
# Assess normality of residuals using shapiro wilk test
#shapiro_test(model.metrics$.resid)
cat("outliers removed")
# outliers
model.metrics %>%
filter(abs(.std.resid) > 3) %>%
as.data.frame()
model_datt<- model.metrics %>%
filter(abs(.std.resid) < 3) %>%
as.data.frame()
library(xlsx)
write.xlsx2(model_datt,file = "clean_HO1_19062020.xlsx",col.names = T)
ggplot(model_datt, aes(x = HO1)) +
geom_density(aes(color = Groups, linetype = Groups),
size = 1.5) + all_theme
library(car)
library(lsmeans)
model_datt$Groups<-as.factor(model_datt$Groups)
model_datt$Groups<-relevel(model_datt$Groups,ref = "4")
cat("Ancova Model")
res.aov <- lm(HO1~Groups+Protein+Age+Gender+Arthritis+Thryoid_problems+Heart_problems+Diabetes,
data = model_datt)
cat("Model checks: Normality of the error terms")
plot(res.aov, 2)
# Extract the residuals
aov_residuals <- residuals(object = res.aov)
# Run Shapiro-Wilk test
cat("Kolmogorov smirnov test")
# the non parametric test for normality
x = aov_residuals
ks.test(x, "pnorm", mean=mean(x), sd=sd(x))
cat("The homogeneity of the variance")
# 1. Homogeneity of variances
plot(res.aov, 1)
leveneTest(HO1~Groups,
data = model_datt)
# reference group is group 4
cat("Summary of regression model")
summary(res.aov)
lsmeans(res.aov, ~ Groups)
anova(res.aov)
tab_model(res.aov)
#plot_model(res.aov)
cat("correction for multiple comparisons")
res.aov3<-aov(HO1~Groups+Protein+Age+Gender+Arthritis+Thryoid_problems+Heart_problems+Diabetes,
data = model_datt)
summary(res.aov3)
TukeyHSD(res.aov3, which = "Groups")
cat("crude model: (Anova)")
res.aov0 <- lm(HO1~Groups,
data = model_datt)
summary(res.aov0)
lsmeans(res.aov0, ~ Groups)
library(pROC)
cat("roc curves and classification models")
## All the LR models
lrdata = model_datt
lrdata$Groups<-as.character(lrdata$Groups)
dat<-lrdata[lrdata$Groups%in%c(1,4),]
dat$Groups<-as.factor(dat$Groups)
dat1<-dat
lr1<-glm(Groups~ HO1+Age+Gender+Arthritis+Thryoid_problems+Heart_problems+Diabetes,
family = "binomial", data = dat)
tab_model(lr1)
pred1 = predict(lr1)
roc(response = dat$Groups, predictor = pred1,plot = TRUE, print.auc = TRUE,ci = T,main="Group 1 vs 4")
roc1 = roc(response = dat$Groups, predictor = pred1)
# plot.roc(x = dat$Groups, pred1,
# main="Group 1 vs 4", percent=F,
# ci=TRUE, of="thresholds",
# thresholds="best",
# print.thres="best")
dat<-lrdata[lrdata$Groups%in%c(2,4),]
dat$Groups<-as.factor(dat$Groups)
dat2<-dat
lr2<-glm(Groups~ HO1+Age+Gender+Arthritis+Thryoid_problems+Heart_problems+Diabetes,
family = "binomial", data = dat)
tab_model(lr2)
pred2 = predict(lr2)
roc(response = dat$Groups, predictor = pred2,plot = TRUE, print.auc = TRUE,ci = T,main="Group 2 vs 4")
roc2 = roc(response = dat$Groups, predictor = pred2)
# plot.roc(x = dat$Groups, pred2,
# main="Group 2 vs 4", percent=F,
# ci=TRUE, of="thresholds",
# thresholds="best",
# print.thres="best")
dat<-lrdata[lrdata$Groups%in%c(3,4),]
dat$Groups<-as.factor(dat$Groups)
dat3<-dat
lr3<-glm(Groups~ HO1+Age+Gender+Arthritis+Thryoid_problems+Heart_problems+Diabetes,
family = "binomial", data = dat)
tab_model(lr3)
pred3 = predict(lr3)
roc(response = dat$Groups, predictor = pred3,plot = TRUE, print.auc = TRUE,ci = T,main="Group 3 vs 4")
roc3 = roc(response = dat$Groups, predictor = pred3,auc = T)
# plot.roc(x = dat$Groups, pred3,
# main="Group 3 vs 4", percent=F,
# ci=TRUE, of="thresholds",
# thresholds="best",
# print.thres="best")
plot(roc1, col = "black", lty = 3, main = "ROC curves")
plot(roc2, col = "blue", lty = 4, add = TRUE)
plot(roc3, col = "red", lty = 5, add = TRUE)
# Add a legend
legend(.5,.5, legend=c("1vs4: 0.83(0.77,0.88)", "2vs4: 0.86(0.79,0.94)","3vs4: 0.87(0.79,0.95)"),
col=c("black","blue","red"), lty=c(3,4,5), cex=.85,lwd = c(2,2,2))
text(.3,.55, "Models")
grid()
cat("Testing HO1 levels without adjustment - parametric")
my_comparisons <- list( c("4", "1"),c("4", "2"),c("4", "3"))
ggboxplot(model_datt, x = "Groups", y = "HO1",
color = "Groups", palette = "jco") +
stat_compare_means(comparisons = my_comparisons, method = "t.test") +
stat_compare_means(label.y = 200, method = "anova")
res.aov3<-aov(HO1~Groups,
data = model_datt)
summary(res.aov3)
TukeyHSD(res.aov3, which = "Groups")
cat("Total protein vs groups")
my_comparisons <- list( c("4", "1"),c("4", "2"),c("4", "3"))
ggboxplot(model_datt, x = "Groups", y = "Protein",
color = "Groups", palette = "jco") +
stat_compare_means(comparisons = my_comparisons, method = "t.test") +
stat_compare_means(label.y = 15, method = "anova")
res.aov3<-aov(Protein~Groups,
data = model_datt)
summary(res.aov3)
TukeyHSD(res.aov3, which = "Groups")
# Table 1
cols2 = colnames(model_datt)[-c(2,10:16)]
Table1<-CreateTableOne(vars = cols2, strata = "Groups",
data = model_datt, test = F)
print(Table1, smd=F,showAllLevels = TRUE)
model_datt$regroups<-as.character(model_datt$Groups)
model_datt$regroups<-as.factor(ifelse(model_datt$regroups%in%c("1","3"),"non_degenerate","degenerate"))
cols1<-c("HO1","Protein","Age","Gender","Arthritis","Thryoid_problems",
"Heart_problems","Diabetes","LEDD","HY")
Table1<-CreateTableOne(vars = cols1, strata = "regroups",
data = model_datt, test = T)
print(Table1, smd=F,showAllLevels = TRUE)
# Fit the model, the covariate goes first
cat("ancova")
res.aov <- lm(HO1~regroups+Protein+Age+Gender+Arthritis+Thryoid_problems+Heart_problems+Diabetes,
data = model_datt)
summary(res.aov)
lsmeans(res.aov, ~ regroups)
cat("crude model: (Anova)")
res.aov0 <- lm(HO1~regroups,
data = model_datt)
summary(res.aov0)
lsmeans(res.aov0, ~ regroups)
# contrasts(model_datt$regroups)<-contr.sum
# str(model_datt$regroups)
# res.aov1 <- lm(HO1~regroups+Protein+Age+Gender+Arthritis+Thryoid_problems+Heart_problems+Diabetes,
#               data = model_datt)
# Anova(res.aov1, type = "III")
## roc curve
dat<-model_datt
dat$Groups<-as.factor(dat$regroups)
dat1<-dat
lr1<-glm(regroups~ HO1+Age+Gender+Arthritis+Thryoid_problems+Heart_problems+Diabetes,
family = "binomial", data = dat)
tab_model(lr1)
pred1 = predict(lr1)
roc(response = dat$regroups, predictor = pred1,plot = TRUE, print.auc = TRUE,ci = T,main="")
cat("HO1 and LEDD as covariate")
res.aov <- lm(HO1~LEDD+Protein+Age+Gender+Arthritis+Thryoid_problems+Heart_problems+Diabetes,
data = dff)
dff = df[,c("HO1","Protein","LEDD","HY","Groups","Diagnosis",
"Age","Gender","Arthritis","Thryoid_problems","Heart_problems","Diabetes")]
dff$HY<-as.numeric(dff$HY)
dff$LEDD<-as.numeric(dff$LEDD)
cat("Correlation between HO1 and total LEDD")
rdff = dff[dff$HY>0,]
ggscatter(rdff, x = "LEDD", y = "HO1",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "LEDD", ylab = "HO-1")
dff$HY<-ifelse(dff$HY>2,"3+",dff$HY)
dff$HY<-as.factor(dff$HY)
cat("Compare HO-1 in H&Y")
my_comparisons <- list( c("0", "3+"),c("1", "3+"),c("2", "3+"))
ggerrorplot(dff, x = "HY", y = "HO1",
desc_stat = "mean_sd", color = "black", xlab = "H&Y", ylab = "HO-1 concentration",
add = "violin", add.params = list(color = "darkgray"))+
stat_compare_means(comparisons = my_comparisons,method = "t.test")+
stat_compare_means(label.y = 150, method = "anova")                  # Add global p-value
res.aov3<-aov(HO1~HY,
data = dff)
summary(res.aov3)
TukeyHSD(res.aov3, which = "Groups")
###
cat("HO1 and HY as covariate")
res.aov <- lm(HO1~HY+Protein+Age+Gender+Arthritis+Thryoid_problems+Heart_problems+Diabetes,
data = dff)
summary(res.aov)
library(lsmeans)
lsmeans(res.aov, ~ HY)
# lsmeans(res.aov,
#         ~ HY,
#         adjust="tukey")       ### Tukey-adjusted comparisons
cat("HO1 and LEDD as covariate")
res.aov <- lm(HO1~LEDD+Protein+Age+Gender+Arthritis+Thryoid_problems+Heart_problems+Diabetes,
data = dff)
summary(res.aov)
library(lsmeans)
lsmeans(res.aov, ~ HY)
lsmeans(res.aov, ~ LEDD)
cat("Plots of distributions")
ggplot(subdata, aes(x = HO1)) +
geom_density(aes(color = Groups, linetype = Groups),
bins = 30, size = 1.5) + all_theme
cat("Correlation between HO1 and total Protein")
ggscatter(subdata, x = "Protein", y = "HO1",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Protein", ylab = "HO-1", label.y = 100)
cat("Plots of distributions")
ggplot(subdata, aes(x = HO1)) +
geom_density(aes(color = Groups, linetype = Groups),
bins = 30, size = 1.5) + all_theme
cat("Correlation between HO1 and total Protein")
ggscatter(subdata, x = "Protein", y = "HO1",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Protein", ylab = "HO-1", label.y = 110)
cat("Plots of distributions")
ggplot(subdata, aes(x = HO1)) +
geom_density(aes(color = Groups, linetype = Groups),
bins = 30, size = 1.5) + all_theme
cat("Correlation between HO1 and total Protein")
ggscatter(subdata, x = "Protein", y = "HO1",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Protein", ylab = "HO-1", label.y = 110)
?ggscatter
ggscatter(subdata, x = "Protein", y = "HO1",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "pearson",
xlab = "Protein", ylab = "HO-1", show.legend.text = F)
